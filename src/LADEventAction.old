#include "LADEventAction.hh"

#include "G4AnalysisManager.hh"
#include "G4RunManager.hh"
#include "G4Event.hh"
#include "G4SDManager.hh"
#include "G4HCofThisEvent.hh"
#include "G4UnitsTable.hh"

#include "Randomize.hh"
#include <iomanip>

// namespace B4d
// {

  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

  G4THitsMap<G4double>*
  LADEventAction::GetHitsCollection(G4int hcID,
				 const G4Event* event) const
  {
 G4cout<<"LADEventAction::GetHitsCollection"<<G4endl;
    
    auto hitsCollection
      = static_cast<G4THitsMap<G4double>*>(
					   event->GetHCofThisEvent()->GetHC(hcID));
  
    if ( ! hitsCollection ) {
      G4ExceptionDescription msg;
      msg << "Cannot access hitsCollection ID " << hcID;
      G4Exception("LADEventAction::GetHitsCollection()",
		  "MyCode0003", FatalException, msg);
    }

    return hitsCollection;
  }
  
  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
  
  G4double LADEventAction::GetSum(G4THitsMap<G4double>* hitsMap) const
  {

    G4cout<<"LADEventAction::GetSum"<<G4endl;
    
    G4double sumValue = 0.;
    for ( auto it : *hitsMap->GetMap() ) {
      // hitsMap->GetMap() returns the map of std::map<G4int, G4double*>
      sumValue += *(it.second);
    }
    return sumValue;
  }

  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
  
  void LADEventAction::PrintEventStatistics(		    G4double absoEdep)
  //    , G4double absoTrackLength, G4double gapEdep, G4double gapTrackLength)
					 const
  {
    // Print event statistics
    //
    G4cout
      << "   Absorber: total energy: "
      << std::setw(7) << G4BestUnit(absoEdep, "Energy")
      // << "       total track length: "
      // << std::setw(7) << G4BestUnit(absoTrackLength, "Length")
      // << G4endl
      // << "        Gap: total energy: "
      // << std::setw(7) << G4BestUnit(gapEdep, "Energy")
      // << "       total track length: "
      // << std::setw(7) << G4BestUnit(gapTrackLength, "Length")
      << G4endl;
  }
  
  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
  
  void LADEventAction::BeginOfEventAction(const G4Event* /*event*/)
  {
    G4cout<<"LADEventAction::BeginOfEventAction START"<<G4endl;

  }

  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

  void LADEventAction::EndOfEventAction(const G4Event* event)
  {
    G4cout<<"LADEventAction::EndOfEventAction START"<<G4endl;

    // Get hist collections IDs
    if ( fAbsoEdepHCID == -1 ) {
      fAbsoEdepHCID
	= G4SDManager::GetSDMpointer()->GetCollectionID("LADbarsHitsCollection");
      // fGapEdepHCID
      // 	= G4SDManager::GetSDMpointer()->GetCollectionID("Gap/Edep");
      // fAbsoTrackLengthHCID
      // 	= G4SDManager::GetSDMpointer()->GetCollectionID("Absorber/TrackLength");
      // fGapTrackLengthHCID
      // 	= G4SDManager::GetSDMpointer()->GetCollectionID("Gap/TrackLength");
    }

    G4cout<<"Here 1"<<G4endl;
    
    // Get sum values from hits collections
    //
    auto absoEdep = GetSum(GetHitsCollection(fAbsoEdepHCID, event));
    //  auto gapEdep = GetSum(GetHitsCollection(fGapEdepHCID, event));

    G4cout<<"Here 2"<<G4endl;
    
    // auto absoTrackLength
    //   = GetSum(GetHitsCollection(fAbsoTrackLengthHCID, event));
    // auto gapTrackLength
    //   = GetSum(GetHitsCollection(fGapTrackLengthHCID, event));

    G4cout<<"Here 3"<<G4endl;
    // get analysis manager
    auto analysisManager = G4AnalysisManager::Instance();

    // fill histograms
    //
    analysisManager->FillH1(0, absoEdep);
    // analysisManager->FillH1(1, gapEdep);
    // analysisManager->FillH1(2, absoTrackLength);
    // analysisManager->FillH1(3, gapTrackLength);

    // fill ntuple
    //
    analysisManager->FillNtupleDColumn(0, absoEdep);
    // analysisManager->FillNtupleDColumn(1, gapEdep);
    // analysisManager->FillNtupleDColumn(2, absoTrackLength);
    // analysisManager->FillNtupleDColumn(3, gapTrackLength);
    analysisManager->AddNtupleRow();

    //print per event (modulo n)
    //
    auto eventID = event->GetEventID();
    auto printModulo = G4RunManager::GetRunManager()->GetPrintProgress();
    if ( ( printModulo > 0 ) && ( eventID % printModulo == 0 ) ) {
      PrintEventStatistics(absoEdep);
      G4cout << "--> End of event: " << eventID << "\n" << G4endl;  
    }
  }

  //....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

