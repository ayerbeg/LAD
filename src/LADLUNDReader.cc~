#include "LADLUNDReader.hh"




using namespace std;

LADLUNDReader::LADLUNDReader()
{
  G4cout<<"LADLUNDReader::LADLUNDReader()"<<G4endl;

  fileName ="LUND_example.txt";
  cur_file.open(fileName);
  
  G4cout<<fileName<<G4endl;
  // need to add a control in case file doesn't exist
  
}


LADLUNDReader::~LADLUNDReader()
{
  
}

void LADLUNDReader::ReadFile()
{
  G4cout<<"Reading the file"<<G4endl;

  const G4int nHeader = 10;
  const G4int npartColumns = 14;


 

  //  if (cur_file.is_open())
    {
      
      string line1;
      string line2;


      // The strategy:
      // - read the first line ONLY corresponding to the header
      // - get the number of particle in the event
      // - loop to read the number of lines retrieve from the header
      // - move out of the event
      // there should not be a while loop
      
      
      //      while (getline(cur_file, line))

      // get the first line, which is the header
      // this will set how many lines I need to read afterwards
      // for the whole event
      getline(cur_file, line1);
	{
	  

	  istringstream iss1(line1);
	  
	  istringstream iss2(line2);
	  
	  for (string s; iss1 >> s;)
	    {
	      header.push_back(s);
	    }
	  G4cout<<"nHeader: "<< header.size()<<G4endl;
	  nPart = atoi(header.at(0).c_str());
	  if (header.size() == nHeader)
	    {
	      
	      for(G4int kk = 0; kk <atoi(header.at(0).c_str()) ; kk++) 
		{
		  getline(cur_file, line2);
		  //		  G4cout<<line2<<G4endl;

		  stringstream ss2(line2);

		  for (std::string s2; ss2 >> s2;)
		    {
		      particle.push_back(s2);
		    }

		  for (G4int pp = 0; pp< particle.size(); pp++)
		    {
		      G4cout<<particle.at(pp)<<G4endl;
		    }		  
		  
		  index.push_back( atoi(particle.at(0).c_str() ));
		  t_live.push_back( atof(particle.at(1).c_str()) );
		  type.push_back( atoi(particle.at(2).c_str()) );
		  pid.push_back( atoi(particle.at(3).c_str()) );
		  parentInd.push_back( atoi(particle.at(4).c_str()) );
		  daughtInd.push_back( atoi(particle.at(5).c_str()) );
		  px.push_back( atof(particle.at(6).c_str()) );
		  py.push_back( atof(particle.at(7).c_str()) );
		  pz.push_back( atof(particle.at(8).c_str()) );
		  E.push_back( atof(particle.at(9).c_str()) );
		  m.push_back( atof(particle.at(10).c_str()) );
		  vx.push_back( atof(particle.at(11).c_str()) );
		  vy.push_back( atof(particle.at(12).c_str()) );
		  vz.push_back( atof(particle.at(13).c_str())) ;        
		  		  
		}
	 
	    }
	  
	}
    }
}

void LADLUNDReader::Clear()
{

  header.clear();
  particle.clear();

  	  index.clear();
	  t_live.clear();
	  type.clear();
	  pid.clear();
	  parentInd.clear();
	  daughtInd.clear();
	  px.clear();
	  py.clear();
	  pz.clear();
	  E.clear();
	  m.clear();
	  vx.clear();
	  vy.clear();
	  vz.clear();        
	  
}


LADLUNDReader *LundRead=NULL;
